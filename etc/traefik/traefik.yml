api:
  ##
  # Enable the API in insecure mode, which means that the API will be available
  # directly on the entryPoint named `traefik`, on path `/api`.
  #
  insecure: true

  ##
  # Disable dashboard ad.
  #
  disableDashboardAd: true

##
# By default, logs are written to stdout, in text format.
#
log:
  ##
  # Logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
  #
  # Optional, Default=ERROR
  level: INFO

##
# EntryPoints are the network entry points into Traefik.
#
# They define the port which will receive the packets, and whether to listen for
# TCP or UDP.
#
entryPoints:
  EntryPoint-Web:
    ##
    # The address defines the port, and optionally the hostname, on which to
    # listen for incoming connections and packets.
    #
    # It also defines the protocol to use (TCP or UDP). If no protocol is
    # specified, the default is TCP. The format is:
    #
    #     [host]:port[/tcp|/udp]
    #
    # If both TCP and UDP are wanted for the same port, two entryPoints
    # definitions are needed.
    #
    address: ":80"

    ##
    # The `asDefault` option marks the EntryPoint to be in the list of default
    # EntryPoints.
    #
    # EntryPoints in this list are used (by default) on HTTP and TCP routers
    # that do not define their own EntryPoints option.
    #
    # Optional, Default=false
    #
    #noinspection YAMLSchemaValidation
    asDefault: true

    ##
    # Options that will apply only to HTTP routing.
    #
    http:
      redirections:
        ##
        # Enable (permanent) redirecting of all incoming requests on this entry
        # point to the "secureweb" entry point.
        #
        entryPoint:
          to: EntryPoint-WebSecure
          scheme: https

  EntryPoint-WebSecure:
    # Port on which to listen for incoming HTTPS connections.
    address: ":443"

    # Marks the EntryPoint to be in the list of default EntryPoints.
    #noinspection YAMLSchemaValidation
    asDefault: true

    ##
    # Options that will apply only to HTTP routing.
    #
    http:
      ##
      # TLS configuration applied to routers associated with this entry point.
      #
      tls:
        ##
        # If a `certResolver` is defined, Traefik will try to generate
        # certificates based on router's `Host` & `HostSNI` rules.
        #
        certResolver: CertResolver-Acme-TransIP

  EntryPoint-Minecraft-Java:
    address: ":25565"

  EntryPoint-Minecraft-Bedrock-IPv4:
    address: ":19132/udp"

  EntryPoint-Minecraft-Bedrock-IPv6:
    address: ":19133/udp"

##
# Configuration discovery in Traefik is achieved through _Providers_.
#
# The _providers_ are infrastructure components, whether orchestrators,
# container engines, cloud providers, or key-value stores. The idea is that
# Traefik queries the provider APIs to find relevant information about
# routing, and when Traefik detects a change, it dynamically updates the routes.
#
providers:
  ##
  # Enable the Docker provider.
  #
  docker:
    ##
    # Expose containers by default through Traefik.
    #
    # If set to `false`, containers that do not have a `traefik.enable=true`
    # label are ignored from the resulting routing configuration.
    #
    # Optional, Default=true
    #
    exposedByDefault: false

    ##
    # Defines a default docker network to use for connections to all containers.
    #
    # This option can be overridden on a per-container basis with the
    # `traefik.docker.network` label.
    #
    # Optional, Default=""
    #
    network: traefik

    ##
    # If this parameter is set to `true`, any "servers load balancer" defined
    # for Docker containers is created regardless of the "healthiness" of the
    # corresponding containers.
    #
    # It also then stays alive and responsive even at times when it becomes
    # empty, i.e. when all its children containers become unhealthy. This
    # results in `503` HTTP responses instead of `404` ones, in the above cases.
    #
    allowEmptyServices: true

##
# Traefik requires you to define "Certificate Resolvers" in the static
# configuration, which are responsible for retrieving certificates from an ACME
# server.
#
certificatesResolvers:

  CertResolver-Acme-TlsChallenge:
    acme:
      email: "me@yogarine.com"
      storage: "/etc/traefik/certs/acme.json"
      tlsChallenge: {}

  CertResolver-Acme-HttpChallenge:
    acme:
      email: "me@yogarine.com"
      storage: "/etc/traefik/certs/acme.json"
      httpChallenge:
        entryPoint: EntryPoint-Web

  CertResolver-Acme-TransIP:
    acme:
      email: "me@yogarine.com"
      storage: "/etc/traefik/certs/acme.json"
      dnsChallenge:
        provider: transip
